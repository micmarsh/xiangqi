;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var global=typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};// Generated by CoffeeScript 1.6.2
(function() {
  var System;

  System = (function() {
    var actors;

    actors = {};
    return {
      create: function(name, onReceive) {
        var actor;

        if (actors[name]) {
          throw new Error("Actor \"" + name + "\" already exists");
        }
        actors[name] = actor = {
          name: name,
          send: function(message, sender) {
            return onReceive(message, sender, actor);
          }
        };
        return actor;
      },
      get: function(name) {
        var actor;

        actor = actors[name];
        if (!actor) {
          throw new Error("Actor \"" + name + "\" doesn't exist");
        }
        return actor;
      },
      blank: {
        send: function() {}
      },
      later: function(fn) {
        return setTimeout(fn, 0);
      },
      test: false
    };
  })();

  System.create('color', (function() {
    System.later(function() {
      var master;

      master = System.get('master');
      return System.get('color').send({
        type: 'get-color'
      }, master);
    });
    return function(m, sender, self) {
      var storage;

      switch (m.type) {
        case 'get-color':
          return System.get('storage').send({
            type: 'get',
            data: 'color'
          }, sender);
        case 'set-color':
          storage = System.get('storage');
          return storage.send({
            type: 'set-if-new',
            data: {
              key: 'color',
              value: m.data
            }
          }, self);
        case 'confirm-set':
          return self.send({
            type: 'get-color'
          }, System.get('master'));
      }
    };
  })());

  System.create('history', (function() {
    var pushing;

    pushing = false;
    System.later(function() {
      return System.get('history').send({
        type: 'get-history'
      }, System.get('inmoves'));
    });
    return function(message, sender, self) {
      var data, storage;

      storage = System.get('storage');
      switch (message.type) {
        case 'get-history':
          return storage.send({
            type: 'safe-get',
            data: {
              key: 'history',
              backup: []
            }
          }, self);
        case 'history':
          data = message.data;
          if (pushing) {
            data.push(pushing);
            storage.send({
              type: 'set',
              data: {
                key: 'history',
                value: data
              }
            }, self);
            return pushing = false;
          } else {
            return System.get('inmoves').send({
              type: 'history',
              data: data || []
            }, self);
          }
          break;
        case 'push':
          pushing = message.data;
          return self.send({
            type: 'get-history'
          });
      }
    };
  })());

  System.create('id', (function() {
    var currentId, isGame, needToConfirm, newId, playerColor;

    if (System.test) {
      global.location = {};
      global.location.hash = '#15o6';
    }
    isGame = function(id) {
      return typeof id === "string" && id.length === 5;
    };
    newId = function() {
      return Math.random().toString(36).substring(3, 8);
    };
    currentId = location.hash.slice(1);
    playerColor = "black";
    if (!isGame(currentId)) {
      location.hash = "#" + (currentId = newId());
      playerColor = "red";
    }
    needToConfirm = playerColor === 'black';
    System.later(function() {
      var color;

      color = System.get('color');
      return color.send({
        type: 'set-color',
        data: playerColor
      }, System.get('master'));
    });
    return function(m, sender, self) {
      switch (m.type) {
        case 'get-id':
          return sender.send({
            type: 'id',
            data: currentId
          }, self);
      }
    };
  })());

  System.create('inmoves', function(_arg, sender, self) {
    var data, master, move, type, _i, _len, _results;

    data = _arg.data, type = _arg.type;
    master = System.get('master');
    switch (type) {
      case "history":
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          move = data[_i];
          _results.push(master.send({
            type: 'move',
            data: {
              legal: true,
              move: move
            }
          }, self));
        }
        return _results;
        break;
      case 'move':
        return master.send({
          data: data,
          type: type
        }, sender);
    }
  });

  System.create('legality', (function() {
    var checker, playerColor;

    checker = require('./lib/xiangcheck');
    playerColor = null;
    System.later(function() {
      return System.get('color').send({
        type: 'get-color'
      }, System.get('legality'));
    });
    return function(_arg, sender, self) {
      var data, legal, move, pieces, turn, type;

      type = _arg.type, data = _arg.data;
      switch (type) {
        case 'color':
          return playerColor = data;
        case 'state':
          pieces = data.pieces, turn = data.turn;
          return checker.setState(pieces, turn);
        case 'check-move':
          if (playerColor) {
            legal = checker.isLegal(data, data.color || playerColor);
            if (legal && data.send) {
              delete data.send;
              data.color = playerColor;
              return System.get('p2p').send({
                data: data,
                type: 'check-move'
              }, self);
            } else {
              return sender.send({
                type: 'move',
                data: {
                  legal: legal,
                  move: data
                }
              }, self);
            }
          }
          break;
        case 'confirmed':
          move = data.move;
          System.get('history').send({
            type: 'push',
            data: move
          });
          return System.get('inmoves').send({
            data: data,
            type: 'move'
          });
      }
    };
  })());

  System.create('master', (function() {
    var app;

    app = Elm.fullscreen(Elm.Xiangqi, {
      color: 'red',
      inMoves: {
        legal: false,
        move: {
          from: '0,0',
          to: '0,0'
        }
      },
      connected: false
    });
    System.later(function() {
      var legality, master;

      legality = System.get('legality');
      master = System.get('master');
      app.ports.outMoves.subscribe(function(move) {
        move.send = true;
        return legality.send({
          type: 'check-move',
          data: move
        }, master);
      });
      return app.ports.state.subscribe(function(state) {
        return legality.send({
          type: 'state',
          data: state
        }, master);
      });
    });
    return function(message, s, self) {
      var data, type;

      type = message.type, data = message.data;
      switch (type) {
        case 'move':
          return app.ports.inMoves.send(data);
        case 'color':
          return app.ports.color.send(data);
        case 'connected':
          return app.ports.connected.send(data);
        default:
          console.log("master recieved unknown message");
          console.log(message);
          console.log('sent by');
          return console.log(s);
      }
    };
  })());

  System.create('p2p', (function() {
    var checking, color, confirm, connect, connected, connection, id, other, prefix, registerConn, wait;

    id = null;
    color = null;
    other = null;
    checking = null;
    connection = null;
    connected = function() {
      return System.get('master').send({
        type: 'connected',
        data: true
      });
    };
    prefix = 'xiangqi-';
    confirm = function(actor, data) {
      delete data.move.color;
      return actor.send({
        data: data,
        type: 'confirmed'
      });
    };
    registerConn = function(conn, peer, self) {
      conn.on('data', function(data) {
        switch (data.type) {
          case 'check-move':
            return System.get('legality').send(data, self);
          case 'move':
            confirm(checking, data.data);
            return checking = null;
        }
      });
      return conn.on('close', function() {
        alert('u closed');
        return connect(peer, self);
      });
    };
    wait = function(fn) {
      if (id && color && other) {
        return fn();
      } else {
        return setTimeout(function() {
          return wait(fn);
        }, 1);
      }
    };
    connect = function(peer, self) {
      connection = peer.connect(prefix + other + id);
      return connection.on('open', function() {
        connected();
        return registerConn(connection, peer, self);
      });
    };
    wait(function() {
      var peer, self;

      self = System.get('p2p');
      peer = new Peer(prefix + color + id, {
        key: '51am0fffupb0ggb9'
      });
      peer.on('connection', function(conn) {
        connected();
        connection = conn;
        return registerConn(conn, peer, self);
      });
      return connect(peer, self);
    });
    System.later(function() {
      var self;

      self = System.get('p2p');
      System.get('id').send({
        type: 'get-id'
      }, self);
      return System.get('color').send({
        type: 'get-color'
      }, self);
    });
    return function(_arg, sender) {
      var data, type;

      type = _arg.type, data = _arg.data;
      switch (type) {
        case 'id':
          return id = data;
        case 'color':
          color = data;
          return other = color === 'red' ? 'black' : 'red';
        case 'check-move':
        case 'move':
          if (type === 'check-move') {
            checking = sender;
          } else {
            confirm(System.get('legality'), data);
          }
          return connection.send({
            type: type,
            data: data
          });
      }
    };
  })());

  System.create('storage', (function() {
    var ID, PREFIX, getInfo, saveInfo, waitForID;

    if (System.test) {
      global.localStorage = {};
    }
    ID = null;
    PREFIX = 'xiangqi-';
    getInfo = function() {
      return JSON.parse(localStorage[PREFIX + ID] || "{ }");
    };
    saveInfo = function(info) {
      return localStorage[PREFIX + ID] = JSON.stringify(info);
    };
    System.later(function() {
      var self;

      self = System.get('storage');
      return System.get('id').send({
        type: 'get-id'
      }, self);
    });
    waitForID = function(fn) {
      if (ID) {
        return fn();
      } else {
        return setTimeout(function() {
          return waitForID(fn);
        }, 1);
      }
    };
    return function(_arg, sender, self) {
      var data, type;

      type = _arg.type, data = _arg.data;
      switch (type) {
        case 'set-if-new':
          return waitForID(function() {
            var info, key, value;

            key = data.key, value = data.value;
            info = getInfo();
            if (info[key] == null) {
              info[key] = value;
              saveInfo(info);
            }
            if (sender) {
              return sender.send({
                data: data,
                type: 'confirm-set'
              }, self);
            }
          });
        case 'set':
          return waitForID(function() {
            var info, key, value;

            info = getInfo();
            key = data.key, value = data.value;
            info[key] = value;
            return saveInfo(info);
          });
        case 'get':
          return waitForID(function() {
            var info;

            info = getInfo();
            if (info[data]) {
              return sender.send({
                type: data,
                data: info[data]
              }, self);
            }
          });
        case 'safe-get':
          return waitForID(function() {
            var backup, info, key;

            info = getInfo();
            key = data.key, backup = data.backup;
            return sender.send({
              type: key,
              data: info[key] || backup
            }, self);
          });
        case 'id':
          return ID = data;
      }
    };
  })());

}).call(this);

},{"./lib/xiangcheck":15}],2:[function(require,module,exports){
var Piece = require('./piece.js');

function Advisor(color) {
  var self = new Piece(color);

  self.type = "Advisor";

  self.getMoves = function(position) {
    var moves = [];
    var palace = position.BOARD.palaces[self.color];
    var directions = [
      ['left', 'up'],
      ['up', 'right'],
      ['right', 'down'],
      ['down', 'left']
    ];
    for (var dir_index = 0; dir_index < 4; dir_index += 1) {
      var direction = directions[dir_index];
      if (!self.square[direction[0]] || !self.square[direction[1]]) {
        continue;
      }
      var target_square = self.square[direction[0]][direction[1]];
      if (!palace[target_square.coordinates]) {
        continue;
      }
      if (!position[target_square.coordinates] ||
        position[target_square.coordinates].color !== self.color) {
        moves.push(target_square.coordinates);
      }
    }
    return moves;
  };

  return self;
}

module.exports = Advisor;

},{"./piece.js":10}],3:[function(require,module,exports){
var Square = require('./square.js');

function Board() {

  var continents = { red: {}, black: {} };
  var palaces = { red: {}, black: {} };

  for (var x = 0; x < 9; x += 1) {
    for (var y = 0; y < 10; y += 1) {
       var coordinates = x + ',' + y;
      var square = new Square(x, y);
      this[coordinates] = square;
      var leftSquare = this[(x - 1) + ',' + y];
      var downSquare = this[x + ',' + (y - 1)];
      if (leftSquare) { square.left = leftSquare; leftSquare.right = square; }
      if (downSquare) { square.down = downSquare; downSquare.up = square }
      if (y < 5) {
        continents.red[coordinates] = square;
      } else {
        continents.black[coordinates] = square;
      }
      if (y < 3 && x < 6 && x > 2) {
        palaces.red[coordinates] = square;
      } else if (y > 6 && x < 6 && x > 2) {
        palaces.black[coordinates] = square;
      }
    }
  }

  Object.defineProperties(this, {
    continents: { value: continents, enumerable: false },
    palaces: { value: palaces, enumerable: false }
  });
}

module.exports = Board;

},{"./square.js":13}],4:[function(require,module,exports){
var Piece = require('./piece.js');

function Cannon(color) {
  var self = new Piece(color);

  self.type = 'Cannon';

  self.getMoves = function(position) {
    var current_square;
    var moves = [];
    var directions = ['left', 'right', 'up', 'down'];
    for (var dir_index = 0; dir_index < directions.length; dir_index += 1) {
      var direction = directions[dir_index];
      var next_square = self.square[direction];
      while (next_square) {
        current_square = next_square;
        if (position[current_square.coordinates]) {
          next_square = current_square[direction];
          while (next_square) {
            current_square = next_square;
            if (position[current_square.coordinates]) {
              if (position[current_square.coordinates].color !== self.color) {
                moves.push(current_square.coordinates);
              }
              break;
            }
            next_square = current_square[direction];
          }
          break;
        }
        moves.push(current_square.coordinates);
        next_square = current_square[direction];
      }
    }
    return moves;
  };

  return self;
}

module.exports = Cannon;

},{"./piece.js":10}],5:[function(require,module,exports){
var Piece = require('./piece.js');

function Chariot(color) {
  var self = new Piece(color);

  self.type = 'Chariot';

  self.getMoves = function(position) {
    var current_square;
    var moves = [];
    var directions = ['left', 'right', 'up', 'down'];
    for (var dir_index = 0; dir_index < directions.length; dir_index += 1) {
      var direction = directions[dir_index];
      var next_square = self.square[direction];
      while (next_square) {
        current_square = next_square;
        if (position[current_square.coordinates]) {
          if (position[current_square.coordinates].color !== self.color) {
            moves.push(current_square.coordinates);
          }
          break;
        }
        moves.push(current_square.coordinates);
        next_square = current_square[direction];
      }
    }
    return(moves);
  };

  return self;
}

Chariot.prototype.constructor = Chariot;

module.exports = Chariot;

},{"./piece.js":10}],6:[function(require,module,exports){

function assertColor(color) {
  if (color !== 'red' && color !== 'black')
    throw Error(color + ' is not a valid color');
}

exports.assertColor = assertColor

},{}],7:[function(require,module,exports){
var Piece = require('./piece.js');

function Elephant(color) {
  var self = new Piece(color);

  self.type = 'Elephant';

  self.getMoves = function(position) {
    var moves = [];
    var continent = position.BOARD.continents[self.color];
    var directions = [
      ['left', 'up'],
      ['up', 'right'],
      ['right', 'down'],
      ['down', 'left']
    ];
    for (var dir_index = 0; dir_index < 4; dir_index += 1) {
      var direction = directions[dir_index];
      if (!self.square[direction[0]] || !self.square[direction[1]]) {
        continue;
      }
      var blocking_square = self.square[direction[0]][direction[1]];
      if (position[blocking_square.coordinates]) {
        continue;
      }
      if (!blocking_square[direction[0]] || !blocking_square[direction[1]]) {
        continue;
      }
      var target_square = blocking_square[direction[0]][direction[1]];
      if (!continent[target_square.coordinates]) {
        continue;
      }
      if (!position[target_square.coordinates] ||
        position[target_square.coordinates].color !== self.color) {
        moves.push(target_square.coordinates);
      }
    }
    return moves;
  };

  return self;
}

module.exports = Elephant;

},{"./piece.js":10}],8:[function(require,module,exports){
var Piece = require('./piece.js');

function General(color) {
  var self = new Piece(color);

  self.type = 'General';

  self.getMoves = function(position) {
    var moves = [];
    var palace = position.BOARD.palaces[self.color];
    var directions = ['left', 'right', 'up', 'down'];
    for(var dir_index = 0; dir_index < 4; dir_index += 1) {
      direction = directions[dir_index];
      target_square = self.square[direction];
      if (!target_square || !palace[target_square.coordinates]) {
        continue;
      }
      if (!position[target_square.coordinates] ||
        position[target_square.coordinates].color !== self.color) {
        moves.push(target_square.coordinates);
      }
    }
    return moves;
  };

  return self;
}

module.exports = General;

},{"./piece.js":10}],9:[function(require,module,exports){
var Piece = require('./piece.js');

function Horse(color) {
  var self = new Piece(color);

  self.type = 'Horse'

  self.getMoves = function(position) {
    var moves = [];
    var directions = {
      left: ['down', 'up'],
      right: ['down', 'up'],
      up: ['left', 'right'],
      down: ['left', 'right']
    };
    for (var pri_dir_index = 0; pri_dir_index < 4; pri_dir_index += 1) {
      var primary_direction = Object.keys(directions)[pri_dir_index];
      var blocking_square = self.square[primary_direction];
      if (!blocking_square || position[blocking_square.coordinates]) {
        continue;
      }
      var pivot_square = blocking_square[primary_direction];
      if (!pivot_square) {
        continue;
      }
      for (var sec_dir_index = 0; sec_dir_index < 2; sec_dir_index += 1) {
        var secondary_direction = directions[primary_direction][sec_dir_index];
        var target_square = pivot_square[secondary_direction];
        if (target_square && (!position[target_square.coordinates] ||
          position[target_square.coordinates].color !== self.color)) {
          moves.push(target_square.coordinates);
        }
      }
    }
    return moves;
  };

  return self;
}

module.exports = Horse;

},{"./piece.js":10}],10:[function(require,module,exports){
var c = require('./color.js')

function Piece(color) {
  c.assertColor(color);
  this.color = color;
}

module.exports = Piece;

},{"./color.js":6}],11:[function(require,module,exports){
var Board = require('./board.js');
var c = require('./color.js')

function Position() {
  var self = this;
  var toMove;

  function place(piece, coordinates) {
    self[coordinates] = piece;
    piece.square = self.BOARD[coordinates];
    return self;
  }

  function remove(coordinates) {
    delete self[coordinates];
    return self;
  }

  function _import(position) {
    var turn = position.toMove;
    for (var key in position) {
      self.place(position[key], key)
    }
    if (turn === 'red' || turn === 'black') {
      self.toMove = position.toMove;
    }
    return this;
  }

  function findGeneral() {
    for (var coordinates in self) {
      var piece = self[coordinates];
      if (piece.color === toMove && piece.type === 'General') {
        return coordinates;
      }
    }
  }

  function isCheck() {
    var piece;
    var general_location = findGeneral();
    for (var coordinates in self) {
      if (coordinates === 'undefined') { continue; }

      piece = self[coordinates];
      if (piece.color === toMove) {
        continue;
      }

      if (piece.getMoves(self).indexOf(general_location) !== -1) {
        return true;
      }
    }
    var forward = toMove === 'red' ? 'up' : 'down';
    var next_square = self.BOARD[general_location][forward];
    while (next_square) {
      current_square = next_square;
      if (self[current_square.coordinates]) {
        if (self[current_square.coordinates].type === 'General') {
          return true;
        }
        break;
      }
      next_square = current_square[forward];
    }
    return false;
  }

  Object.defineProperties(this, {
    toMove: {
      get: function() { return toMove; },
      set: function(color) {
        c.assertColor(color);
        toMove = color;
      },
      enumerable: false
    },
    remove: {value: remove, enumerable: false},
    place: { value: place, enumerable: false },
    'import': { value: _import, enumerable: false },
    isCheck: {
      get: function() { return isCheck(); },
      enumerable: false
    }
  });
}

Object.defineProperties(Position.prototype, {
  BOARD: { value: new Board(), enumerable: false }
});

module.exports = Position;

},{"./board.js":3,"./color.js":6}],12:[function(require,module,exports){
var Piece = require('./piece.js');

function Soldier(color) {
  var self = new Piece(color);

  self.type = 'Soldier';

  self.getMoves = function(position) {
    var moves = [];
    var forward = self.color === 'red' ? 'up' : 'down';
    var continent = position.BOARD.continents[self.color];
    if (continent[self.square.coordinates]) {
      var directions = [forward];
    } else {
      var directions = ['left', forward, 'right'];
    }
    for (var dir_index = 0; dir_index < directions.length; dir_index += 1) {
      var direction = directions[dir_index];
      var target_square = self.square[direction];
      if (!target_square) {
        continue;
      }
      if (!position[target_square.coordinates] ||
        position[target_square.coordinates].color !== self.color) {
        moves.push(target_square.coordinates);
      }
    }
    return moves;
  };

  return self;
}

module.exports = Soldier;

},{"./piece.js":10}],13:[function(require,module,exports){
function Square(x, y) {
  var left;
  var right;
  var up;
  var down;

  this.x = x;
  this.y = y;
  this.coordinates = x + ',' + y;

  Object.defineProperties(this, {
    left: {
      get: function() { return left; },
      set: function(square) { left = square; }
    },
    right: {
      get: function() { return right; },
      set: function(square) { right = square; }
    },
    up: {
      get: function() { return up; },
      set: function(square) { up = square; }
    },
    down: {
      get: function() { return down; },
      set: function(square) { down = square; }
    }
  });
}

module.exports = Square;

},{}],14:[function(require,module,exports){
var Position = require('./position.js');
var Chariot = require('./chariot.js');
var Horse = require('./horse.js');
var Elephant = require('./elephant.js');
var Advisor = require('./advisor.js');
var General = require('./general.js');
var Cannon = require('./cannon.js');
var Soldier = require('./soldier.js');

function StartingPosition() {
  var self = new Position();
  var BOARD = self.BOARD;

  self.place(new Chariot('red'), [0, 0])
    .place(new Horse('red'), [1, 0])
    .place(new Elephant('red'), [2, 0])
    .place(new Advisor('red'), [3, 0])
    .place(new General('red'), [4, 0])
    .place(new Advisor('red'), [5, 0])
    .place(new Elephant('red'), [6, 0])
    .place(new Horse('red'), [7, 0])
    .place(new Chariot('red'), [8, 0])
    .place(new Cannon('red'), [1, 2])
    .place(new Cannon('red'), [7, 2])
    .place(new Soldier('red'), [0, 3])
    .place(new Soldier('red'), [2, 3])
    .place(new Soldier('red'), [4, 3])
    .place(new Soldier('red'), [6, 3])
    .place(new Soldier('red'), [8, 3])
    .place(new Chariot('black'), [0, 9])
    .place(new Horse('black'), [1, 9])
    .place(new Elephant('black'), [2, 9])
    .place(new Advisor('black'), [3, 9])
    .place(new General('black'), [4, 9])
    .place(new Advisor('black'), [5, 9])
    .place(new Elephant('black'), [6, 9])
    .place(new Horse('black'), [7, 9])
    .place(new Chariot('black'), [8, 9])
    .place(new Cannon('black'), [1, 7])
    .place(new Cannon('black'), [7, 7])
    .place(new Soldier('black'), [0, 6])
    .place(new Soldier('black'), [2, 6])
    .place(new Soldier('black'), [4, 6])
    .place(new Soldier('black'), [6, 6])
    .place(new Soldier('black'), [8, 6]);
  self.toMove = 'red';

  return self;
}

module.exports = StartingPosition;

},{"./advisor.js":2,"./cannon.js":4,"./chariot.js":5,"./elephant.js":7,"./general.js":8,"./horse.js":9,"./position.js":11,"./soldier.js":12}],15:[function(require,module,exports){

var Position = require('./position');

var Pieces = {};
Pieces.Advisor = require('./advisor');
Pieces.Cannon = require('./cannon');
Pieces.Chariot = require('./chariot');
Pieces.Elephant = require('./elephant');
Pieces.King = require('./general');
Pieces.Horse = require('./horse');
Pieces.Soldier = require('./soldier');

var Start = require('./starting_position');
var checker = {};
var position = new Start();
var TYPE = 0;
var POSITION = 1;
var COLOR = 2;

checker.setState = function (pieces, turn) {
  var piece;
  var type;
  var pos;
  var color;
  position = new Position();
  for (var i in pieces) {
    piece = pieces[i];
    pos = piece[POSITION];
    type = piece[TYPE];
    color = piece[COLOR];

    //nasty mutability
    piece = new Pieces[type](color);

    position.place(piece, pos);
  }
  position.toMove = turn;
};
checker.setTurn = function (turn) {
  if(position){
    position.toMove = turn;
  }
}

function makeMove(piece, from, to) {
    position.remove(from).place(piece, to);
}

checker.isLegal = function (move, makingMove) {
  function legalPiece (piece) {
    return piece &&
    piece.color === makingMove &&
    piece.color === position.toMove;
  }

  if (position) {
    var from = move.from;
    var to = move.to;
    var piece = position[from];
    if (legalPiece(piece)) {
      var moveList = piece.getMoves(position);
      if (moveList.indexOf(to) !== -1) {
        makeMove(piece, from, to);
        var result = !position.isCheck;
        makeMove(piece, to, from);
        return result;
      }
    }
  }
  return false;
}

module.exports = checker;

},{"./advisor":2,"./cannon":4,"./chariot":5,"./elephant":7,"./general":8,"./horse":9,"./position":11,"./soldier":12,"./starting_position":14}]},{},[1])
;